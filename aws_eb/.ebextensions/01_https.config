# Based on AWS docs:
# https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/https-singleinstance.html

Resources:
  sslSecurityGroupIngress: 
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: {"Fn::GetAtt" : ["AWSEBSecurityGroup", "GroupId"]}
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
      CidrIp: 0.0.0.0/0

files:
  /etc/nginx/sites-enabled/01_http.conf:
    mode: "000644"
    owner: root
    group: root
    content: |
      # Note that all directives in this file must be valid in the http context.

      # HTTP Server - Redirects HTTP to HTTPS
      server {
          listen 80;
          listen [::]:80;
          server_name inquests.ca;
          return 301 https://inquests.ca$request_uri;
      }

  /etc/nginx/sites-enabled/02_https.conf:
    mode: "000644"
    owner: root
    group: root
    content: |
      # Note that all directives in this file must be valid in the http context.
      # The content of this file is based on:
      # https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/https-singleinstance.html; and
      # https://github.com/jessfraz/docker-presentation/blob/master/nginx/basic.conf
      
      # HTTPS Server
      server {
        listen 443;
        server_name localhost;
        
        ssl on;
        ssl_certificate /etc/letsencrypt/live/inquests.ca/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/inquests.ca/privkey.pem;
        # TODO: It is *strongly* recommended to generate unique DH parameters
        # Generate them with: openssl dhparam -out /etc/pki/nginx/dhparams.pem 2048
        # ssl_dhparam "/etc/pki/nginx/dhparams.pem";
        
        ssl_session_timeout 5m;
        
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;

        gzip on;
        gzip_comp_level 4;
        gzip_types text/html text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

        if ($time_iso8601 ~ "^(\d{4})-(\d{2})-(\d{2})T(\d{2})") {
          set $year $1;
          set $month $2;
          set $day $3;
          set $hour $4;
        }

        access_log /var/log/nginx/healthd/application.log.$year-$month-$day-$hour healthd;
        access_log /var/log/nginx/access.log;

        root /var/www;

        location /api {
          proxy_pass http://docker;
          proxy_http_version 1.1;
          
          proxy_set_header Connection "";
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto https;
        }

        location / {
          # First attempt to serve request as file, then as directory, then fall
          # back to redirecting to index.html.
          try_files $uri $uri/ /index.html;
        }

        # Media: images, icons, video, audio, HTC
        location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
          expires 1M;
          access_log off;
          add_header Cache-Control "public";
        }

        # Javascript and CSS files
        location ~* \.(?:css|js)$ {
          try_files $uri =404;
          expires 1y;
          access_log off;
          add_header Cache-Control "public";
        }

        # Any route containing a file extension (e.g. /devicesfile.js)
        location ~ ^.+\..+$ {
            try_files $uri =404;
        }
      }
